**SDK(Software Development Kit)
=>프로그램 개발 도구: vendor에서 제공해주는 클래스나 함수의 집합
=>같은 말로는 API(Application Programming Interface)가 있습니다.
=>JDK(Java software Development Kit) - 오라클에서 제공하는 자바 클래스의 집합
=>제공되는 클래스들은 문서와 함께 제공되기 때문에 클래스에서 사용할 수 있는 생성자, 메소드 등은 문서에서 확인해야 합니다.
문서에는 protected 와 public 멤버에 대해서만 나옵니다.
private 이나 default는 굳이 보여줄 필요가 없기 때문에 생략합니다.

**클래스의 구성요소
1.생성지(constructor) - 인스턴스를 만들기 위한 메소드
2.변수(varoable 0 field) - 저장하기 위한 용도
3.메소드(method) - 작업을 수행하기 위한 용도

**클래스 종류
1.일반 클래스
2.final 클래스: 상속을 할 수 없는 클래스
3.abstract 클래스: 인스턴스를 생성할 수 없는 클래스 - 상속을 해서 사용해야 합니다. 
4.인터페이스: 인스턴스를 생성할 수 없고 다른 인터페이스에 상속하거나 클래스에 구현해서 사용해야 합니다.

**document 에 나와있는 클래스의 구성요소
1.Fleid Summary: static(클래스가 소유 - 공유) final(값을 변경하지 못하는) 변수들에 대한 설명
=>메소드들에서 사용할 수 있는 옵션
2.Constructor Summary: 생성지
=>생성자가 없는 경우: 인터페이스, 추상클래스, 모든 멤버가 static인 클래스(Math, System) 


**java.lang.System 클래스에는 exit(int code)라는 프로그램을 종료하는 메소드가 있습니다.
이 메소드를 활용해보세요

**자바 샘플 코드 사이트
http://www.java2s.com/Code/JavaAPI/CatalogJavaAPI.htm
http://www.java2s.com/Tutorial/Java/CatalogJava.htm

**무료로 알고리즘 문제 풀어보는 사이트
http://www.jungol.co.kr/, 알고스팟

**예외처리(Exception Handling)
1.프로그램에서 발생하는 문제
1)물리적 오류(error): 프로그램을 작성할 때 문법적인 오류를 발생시켜서 프로그램이 시작되지 않는 것으로 Eclipse에서 빨간색 사각형이 보입니다.
2)논리적 오류: 문법적인 오류는 없어서 프로그램이 실행되는데 로직을 잘못 만들어서 결과가 이상하게 출력되는 경우로 디버깅을 통해서 찾아서 해결

디버깅: 논리적 오류나 예외 발생 지점을 찾기 위해서 메모리의 값을 확인하는 작업입니다.

3)예외(Exception): 문법적인 오류는 아니여서 프로그램이 실행은 되지만 실행 도중 에기치 않은 상황 발생으로 프로그램이 중단되는 것
예외처리를 통해서 예외가 발생하면 예외를 기록하던가 예외가 발생해도 계속 프로그램을 동작하도록 만들어 주어야 합니다.
디버깅을 통해서 찾아내기도 하고 콘솔 창을 확인해서 찾아내기도 합니다.

4)단언(assert): 프로그램이 특정 조건을 만족하지 않는 경우 예외를 발생시켜 강제로 중단시키는 것

**이클립스에서 디버깅 
=>라인번호 옆의 gutter 마우스 오른쪽을 클릭하면 중단점을 추가하거나 삭제할 수 있습니다.
=>[Run] - [Debug]를 실행

**예외처리의 목적
=>에외가 발생하더라도 프로그램을 계속 실행 할 수 있도록 하기 위해서
=>예외 내용을 기록해서 다음에 이러한 예외가 발생하지 않도록 프로그램을 수정하기 위해서 

**예외의 종류
1.Runtime Exception: 예외 발생 여부를 컴파일러가 체크하지 않는 예외로 개발자가 직접 예외를 처리해야 하는 것으로 예외 처리 코드를 작성하지 않아도 됩니다.

2.일반 Exception: 컴파일러가 예외 발생 여부를 체크하는 것으로 개발자가 예외 처리 코드를 반드시 작성해야 하는 예외

3.NullpointerException: null이 무엇인가를 호출해서 발생하는 에외입니다.
호출하는 인스턴스를 확인해봐야 합니다.

**예외 처리 방법
1.직접 try - catch - finally 블록을 만드는 방법
2.예외를 발생한 곳으로 던지는 방법

**try블록 - catch블록 - finally블록
try{
        에외 발생 가능성이 있는 코드
}
catch(예외 클래스 이름 변수명){
          예외 클래스에 해당하는 예외가 발생했을 때 수행할 내용;
}
finally{
          예외 발생 여부에 상관없이 수행할 내용;
}
=>catch는 클래스 이름이 다르면 여러 개 사용 가능
=>finally는 catch가 있다면 생략이 가능합니다.
=>try가 나오면 1개 이상의 catch나 1개의 finally가 나와야 합니다.
=>여러 개의 예외를 한번에 처리하고 할 때는 Exception 클래스를 이용하면 됩니다.
상위 클래스 타입으로 만들어진 변수에는 하위 클래스 타입의 인스턴스 주소를 대입할 수 있습니다.

3.fially 
=>예외 발생 여부에 상관없이 수행되는 구문을 작성하는 블록
=>여기에는 일반적으로 외부 자원 과의 연결을 해제하는 코드를 작성

4.예외의 인위적 발생
=>예외 상황이 아닌데 강제로 예외를 발생시키는 것
=>throw new 에외클래스 이름 (String message);

5.예외처리를 호출한 곳으로 넘겨주기
=>예외가 발생한 메소드에서 예외를 처리하는 것이 아니라 메소드를 호출한 곳에서 처리하도록 하는 것
=>메소드 안에서 예외를 처리하게 되면 예외를 처리하는 코드와 비지니스 로직(사용자의 요구를 처리하기 위한 코드)
을 한 곳에 두면 코드를 보기가 어려워지기 때문에 비지니스 로직과 예외 처리 코드를 분리하기 위해서 예외처리를 호출한 곳으로 넘겨서 처리하는 경우가 많습니다.
=>메소드 매개변수 뒤에 throws 에외클래스이름을 적어주면 이 메소드의 예외는 호출한 곳에서 처리해야 합니다.

public ? 티켓팅(?) throws Exception{      
                  티케팅하는 코드;
}
try{
     티켓팅(?);
}
catch(Exception e){
                    에외가 발생했을 때 수행할 내용;
    }
 finally{  
     예외 발생 여부에 상관없이 수행할 내용;           
    }
}
=>어떤 메소드를 사용하고자 할 때 throws 절이 있으면 반드시 예외 처리를 해 주어야 합니다

**image().png image1.png. image1.png
=>위 3개의 문자열 1초마다 번걸아가면서 무한 반복해서 출려하는 로직을 작성

while(?): ?의 값이 거직이 될 때까지 반복
for(처음 한번만 수행하는 내용; 거짓이 되면 중단되는 조건; 두번째 부터 계속해서 수행되는 내용

**예외처리 권장사항
=>반복문 안에서 사용하는 것은 바람직하지 않습니다.
=>main에서 throws 하는 것은 바람직하지 않습니다.

**java lang.Object
=>자바 최상위 클래스 - 모든 자바의 클래스는 이 클래스를 상속합니다.
=>Object 클래스는 인스턴스를 만들기 위해서 만든 클래스가 아니고 다른 모든 클래스가 공통으로 가져야 하는 메소들을 만들어 놓기 위해서 만든 클래스 입니다

1.생성자: 실제 사용은 하지 않습니다.
object()

2.주요 메소드
1)String toString(): 인스턴스의 문자열을 리턴하는 메소드 기본적으로는 클래스이름과 해시코드(인스턴스를 구분하기 위한 문자열)를 문자열로 리턴
하위 클래스에서 재정의해서 사용하는 경우가 많습니다.

2)boolean equals(Object other): 인스턴스의 내용이 같은지 비교하는 메소드 ==: 저장된 값이 같은지 비교하는 연산자
주소를 저장하는 인스턴스들은 ==로는 내용을 비교할 수 없어서 equals로 재정의해서 사용합니다.

3)Object clone(): 인스턴스의 내용을 복제해서 새로운 인스턴스를 리턴하는 메소드 재정의해서 사용해야 합니다.

4)notify(), notifyAll(), wait(): 멀티 스레드 환경에서 생산자와 소비자 문제를 해결하기 위한 메소드
=> toString() 메소드 만은 직접 호출하지 않고 출력을 하는 메소드에게 인스턴스 이름을 기재한 경우 자동으로 호출됩니다.





 