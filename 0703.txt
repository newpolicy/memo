공유 폴더: \\192.168.0.100 컴퓨터의 java

환경변수
- path: command 창에서 명령어를 입력했을 때 찾는 위치를 설정하는 것입니다.
path 설정이 된 디렉토리에 있는 명령어는 위치를 입력하지 안고 명령어만으로 실행할 수 있습니다.
java를 설치한 경우는 jdk 디렉토리의 bin 이라는 디렉토리를 설정합니다.
bin이라는 디렉토리에 java 명령어가 전부 존재합니다.

-JAVA_HOME: 자바로 만들어진 개발 도구들이 참조할 jdk 디렉토리
jdk 디렉토리 위치를 설정해 주어야 합니다.

-JRE_HOME: 자바로 만들어진 프로그램이 실행될 때 참조할 JRE가 설치된 디렉토리 위치를 설정해 주어야 합니다.
이 설정이 잘못되거나 안되어 있으면 자바로 만들어진 프로그램이 실행될 때 마다 JRE 위치를 물어보게 됩니다.

**접근 지정자
=>변수나 메소드 또는 클래스 앞에 붙여서 사용 범위를 제한하는 것을 접근 지정자 라고 합니다.

1.클래스 접근 지정자
1)public : 아무 곳에서나 사용할 수 있는 클래스를 만들 때 사용하는 접근 지정자 입니다.
하나의 파일에는 1개 이하의 public 클래스만 존재해야 합니다.

2)생략(default, package): 자신의 패키지안에서만 사용할 수 있는 클래스를 만들 때 사용하는 접근 지정자

3)protected: 상속받은 클래스에서만 사용 가능합니다.

4)private: 다른 클래스에서는 사용할 수 없는 클래스를 만들 때 사용합니다.

=>protected 와 private은 클래스 안에 클래스를 만들 때 만 사용할 수 있습니다.

2.변수나 메소드의 접근 지정자

1)public: 클래스 내부에서 사용할 수 있고 클래스 외부에서 인스턴스나 클래스가 사용할 수 있도록 해주는 접근 지정자

2)protected: 클래스 내부와 상속받은 클래스 내부에서 사용할 수 있도록 해주는 접근 지정자

3)생략(default, package): 동일한 패키지 내에서는 public 이고 다른 패키지에서는 private

4)private: 클래스 내부에서만 사용할 수 있도록 해주는 접근 지정자

=>만든 이유는 사용하지 않는 곳에서는 보여주지도 않는 것이 오류 발생을 줄일 수 있기 때문입니다.
=>기본 원칙은 변수는 private으로 하고 메소드는 public 으로 하는 것으로 합니다.
=>저장 공간을 직접 조작하는 것은 위험하기 때문입니다.

**접근자 메소드
=>인스턴스 변수를 private으로 만들면 인스턴스가 변수에 접근을 못하게 되는데 이 때 변수를 사용할 수 있도록 만들어주는 메소드를 접근자 메소드라고 합니다.
=>데이터를 가져오는 메소드를 getter라고 하고 데이터를 설정하는 메소드를 setter라고 합니다.
1)getter
=>접근지정자는 public 으로 하고 리턴 타입은 변수의 자료형과 동일하게 하고 이름은 get변수명으로 만드는데 변수명의 첫글자는 대문자로 시작합니다.
=>매개변수는 없으며 내용은 변수를 리턴하기만 하면 됩니다.
=>이름은 예외적으로 boolean 인 경우에는 get 대신에 is를 붙이기도 합니다.

2)setter
=>접근지정자는 public 으로 하고 리턴 타입은 void 이고 이름은 set변수명으로 만드는데 변수명의 첫글자는 대문자로 시작합니다.
=>매개변수는 변수의 자료형과 동일한 자료형으로 1개를 만들어야 하고 메소드의 내용은 인스턴스 변수에 매개변수의 값을 대입하는 코드만 작성합니다.

=>요즈음 나오는 IDE(Integreted Development Environment - 통합 개발 환경)는 이 메소드들을 자동으로 만들어주는 기능을 제공합니다.
=>통합 개발 환경: 코딩 과 컴파일 및 디버깅 등을 한번에 할 수 있도록 해주는 프로그램으로 자바는 eclipse, IntelliJ 등이 있습니다.

**toString
=>인스턴스 변수의 내용을 묶어서 하나로 만들어주는 메소드
=>출력하는 메소드에 인스턴스 변수의 이름을 대입하면 자동으로 이 메소드를 호출해서 출력합니다.
=>디버깅(논리적인 오류나 예외가 발생해서 소스 코드를 확인하는 작업)을 빨리 하기 위해서 사용합니다.

**method overloading(중복 정의) - 면접이나 시험을 보러 갈 때 한번은 보고 가세요

=>하나의 클래스에 메소드의 이름은 같고 매개변수의 자료형이나 개수가 다른 메소드가 존재하는 경우
=>동일한 이름의 메소드가 2개 이상 존재하는 경우
=>동일한 역할을 하는 메소드의 이름을 동일하게 만들기 위해서 제공하는 기능인데 최근에는 메소드의 이름으로 구별하거나 제너릭으로 대체하는 경우가 많습니다.

ex)정수 2개를 더해서 그 결과를 리턴하는 메소드와 실수 2개를 더해서 그 결과를 리턴하는 메소드를 생성하고자 하는 경우
1.Overloading이 안 된 다면
 public int addInteger(int a, int b){
	return a + b;
 }

 public double addDouble(double a, double b){
	return a + b;
 }

2.Overloading 이 허용되는 경우
 public int add(int a, int b){
	return a + b;
 }

 public double add(double a, double b){
	return a + b;
 }

**varargs(가변매개변수)
=>매개변수를 개수에 상관없이 대입할 수 있도록 해주는 문법
=>메소드를 선언할 때 매개변수를 자료형 ... 변수명 의 형식으로 기재하면 메소드를 호출할 때 자료형의 데이터를 몇 개를 대입해도 상관없습니다.
=>메소드내에서는 배열로 처리합니다.

**메소드에서 중요한 것
=>메소드를 호출하는 것 -> 메소드를 만드는 것
=>메소드를 호출할 때 확인해야 할 3가지
1.static이 붙어는지 안붙었는지 확인
=>static이 없는 메소드를 호출하려면 인스턴스를 생성하고 인스턴스를 가지고 호출해야 합니다.
=>static이 붙은 메소드이면 클래스이름을 가지고 호출하면 됩니다.

2.메소드의 매개변수를 확인해야 합니다.
=>메소드를 호출할 때 매개변수를 정확하게 주지 않으면 에러가 납니다.

3.메소드의 리턴 타입을 확인합니다.
리턴타입이 void이면 호출하는 것으로 끝내고 void가 아니면 변수에 저장을 하던지 아니면 다른 연산에 이용을 합니다.

**Constructor(생성자)
=>인스턴스를 생성할 때 호출하는 메소드
=>모든 클래스에는 생성자가 반드시 존재
=>생성자를 별도로 만들지 않으면 매개변수가 없는 생성자가 자동으로 생성됩니다.
=>생성자를 직접 만드는 이유는 인스턴스를 변수를 초기화하거나 인스턴스를 생성할 때 수행해야 할 작업을 작성하기 위해서 입니다.

1.생성자의 규칙
=>이름은 반드시 클래스 이름과 동일해야 합니다.
=>리턴 타입은 없습니다.
=>생성자를 직접 만들면 처음 제공되는 생성자는 소멸됩니다.
=>생성자도 오버로딩이 가능합니다.(여러 개 생성 가능)
=>IDE에는 생성자도 자동으로 만들어주는 기능이 있습니다.
=>인스턴스를 만들 때는 반드시 생성자를 호출해야 합니다.

2.생성자 호출
new 생성자(매개변수)
=>생성자를 호출하면 생성자를 가지고 인스턴스를 만들고 그 인스턴스의 주소를 리턴합니다.

3.생성자를 직접 만드는 이유
=>인스턴스 변수를 초기화하고자 할 때: 0이나 false 또는 null이 아닌 값을 갖도록 하고자 할 때
=>매개변수를 넘겨받아서 초기화(initialize)하고자 해서

4.매개변수가 없는 생성자 
=>매개변수가 없는 생성자를 default constructor라고 합니다.
=>이 생성자가 없는 클래스의 경우 인스턴스를 생성할 때 반드시 매개변수를 넘겨서 생성해 주어야 하고 상속을 하는 경우 하위 클래스에서 반드시 상위 클래스의 생성자를 호출해야 합니다. 

5.매개변수가 있는 생성자
=>외부에서 값을 받아서 인스턴스 변수를 초기화하고자 할 때 이 생성자를 만듭니다.
=>이렇게 외부에서 데이터를 받아서 초기화하는 것을 dependency injection(의존성 주입)이라고 합니다.

*생성자를 여러 개 만들면 인스턴스를 생성하는 방법이 다양해지게 됩니다.
*인스턴스를 만들 때는 생성자를 참조해서 만들어야 합니다.

**Eclipse에서 만든 프로젝트를 github에 업로드 하기
1.github에 가입

2.git 프로그램 설치 - 로컬 저장소를 만들기 위해서
https://www.git-scm.com 
=>디폴트로 설치

3.cmd 창에서 아래 명령 수행
git config --global user.name "이름"
git config --global user.email "이메일" 

4.eclipse에서 git을 사용하기 위해서 egit 이라는 플러그인(보조 프로그램)을 설치

[help] - [Eclipse Marketplace]에서 egit을 검색한 후 설치

5.github.com에서 repository를 생성

6.Git perspective 로 변경
=>perspective: 프로젝트를 진행할 때 편리하게 할 수 있도록 프로젝트 종류 별로 메뉴를 구성하는 창

7.Eclipse와 repository를 연결
1)Clone a git repository를 클릭

2)URI 란에 앞에서 만든 repository 주소를 복사해서 붙여넣기

8.프로젝트를 repository에 업로드 하기
1)프로젝트를 선택하고 마우스 오른쪽을 클릭하고 [Team] - [Share Project]를 클릭

2)Repository를 클릭해서 이전에 연결한 repository 선택

9.프로젝트를 선택하고 마우스 오른쪽을 클릭해서 [Team] - [Commit]을 선택하고 메시지를 작성하고 Commit and Push를 누르면 업로드 됩니다.




























