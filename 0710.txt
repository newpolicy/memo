**String
1.주요 메소드
1)String format(String format, Object ... args)
=>format에 맞추어서 args를 대입해서 문자열을 리턴해주는 메소드
=>printf 사용하는 방법과 동일하게 작성하는데 출력하지 않고 리턴한다는 점이 다릅니다.

2)int indexOf(문자 또는 문자열): 문자나 문자열이 나오는 첫번째 위치를 리턴하는데  문자나 문자열이 없으면 -1을 리턴
뒤에서부터 찾는 lastIndexOf(문자 또는 문자열) 메소드도 있습니다.

3)대소문자 변환을 해주는 toLowerCase(), toUpperCase() 메소드

4)좌우 공백을 제거해주는 trim()

5)문자열의 동일성 여부를 비교해주는 equals(), equalsIgnoreCase()

6)substring(시작위치[, 종료 위치]): 시작위치부터 종료위치 앞 까지의 문자열을 리턴
종료위치를 생략하면 끝까지 입니다.

7)String [] split(문자열 또는 정규식 문자열): 문자열을 매개변수로 대입된 문자열로 분할해서 문자열 배열로 만들어 줍니다.
특수문자는 \와 함께 입력해야 합니다.
\는 \를 4번 해야 합니다.

ex)
		int x = 200;
		int y = 100;
		//x:200 y:100 형식의 문자열 만들기
		String str = String.format("x:%d y:%d", x, y);
		System.out.println(str);
		
		String msg = "I like Java";
		//위의 문자열에서 java 포함여부 확인 - 대소문자 구분없이 
		int idx = 
			msg.toLowerCase().indexOf("java");
		if(idx >= 0) {
			System.out.println("java가 존재합니다.");
		}else {
			System.out.println("java가 존재하지 않습니다.");
		}
		
		//msg의 문자열을 공백을 기준으로 분할해서 하나씩 출력하기
		String [] ar = msg.split(" ");
		for(int i=0; i<ar.length; i=i+1) {
			System.out.println(ar[i]);
		}
		
		//msg의 3번째 부터 7번째 글자까지 출력하기
		String sub = msg.substring(3, 8);
		System.out.println(sub);

2.encoding
=>문자를 컴퓨터에서 사용하기 위해서 숫자로 변환하는 것
=>숫자를 문자열로 변환하는 것은 decoding 입니다.
=>가장 유명한 인코딩이 ASCII - 영문과 숫자를 컴퓨터의 숫자로 표현한 코드
숫자 0 -> 48  대문자 A -> 65 소문자 a ->97
=>모든 인코딩 방식에서 ASCII는 그대로 사용합니다.
=>한글을 표현하는 방식은 일반적으로 2가지로 구분하는데 윈도우즈에서 사용하던 방식은 ms949(cp949)입니다.
이 방식은 한글과 영문 그리고 숫자만 표현이 가능합니다.
웹 에서는 예전에 ms949와 유사한 euc-kr을 사용했습니다.
=>유럽은 iso-8859-1 이라는 인코딩을 표준으로 사용했는데 여기는 한글이 안됩니다.
=>utf-8은 전 세계 모든 문자를 표현할 수 있는 인코딩 방식입니다.
이 인코딩 방식은 chrome, safari, linux, unix, mac-os 의 표준 인코딩 방식입니다.
=>문자열을 주고 받을 때 인코딩 방식을 알아야 하고 변환할 수 있어야 합니다.
기존 시스템의 인코딩은 변경할 수 없기 때문에 기존 시스템과 같이 사용하는 프로그램을 개발할 때는 인코딩이 다른 경우에는 직접 인코딩과 디코딩 작업을 수행해야 합니다.
=>byte []  getBytes(String encType):문자열을 encType의 바이트 배열로 변환하는 메소드
=>String(byte [] bytes, String encType): 바이트 배열을 encType 타입의 문자열로 변환해서 생성합니다.

**java.lang.StringBuilder
=>변할 수 있는 문자열을 저장할 수 있는 클래스
=>여분의 빈 공간을 확보하고 있다가 문자열에 변화가 오면 빈 공간을 활용합니다.
=>문자열을 다룰 때는 String 과 StringBuilder를 적절하게 이용해야 합니다.
=>StringBuilder의 이전 버전으로 StringBuffer 클래스가 있습니다.

1.생성자
StringBuilder()
StringBuilder(int 초기사이즈)
StringBuilder(String 문자열)

2.주요 메소드
append(String str): 문자열을 뒤에 추가
String toString(): 저장하고 있는 문자열을 String으로 리턴

StringBuilder sb = new StringBuilder();
while(true){
	한 줄 다운로드
	다운로드 받은게 있으면 sb.append(다운로드받은 문자열)
             다운로드 받은게 없으면 중지
}
String content = sb.toString();
sb = null;

**Generics
=>자료형을 컴파일할 때 결정하지 않고 실행할 때 결정짓는 기법
=>동일한 알고리즘을 사용하는 메소드들을 매개변수나 리턴 타입 때문에 별도로 만드는 것은 코드의 낭비
=>Generics가 적용된 클래스의 인스턴스 만들기
클래스이름 <실제 자료형> 변수명 = new 생성자<실제 자료형>();
=>변수를 선언할 때 <>를 사용하지 않으면 경고 발생
=>생성자를 호출할 때는 <> 안의 자료형을 생략 가능 - 1.7버전 부터
java.util.ArrayList 인스턴스 만들기
ArrayList <String> al = new ArrayList<>();

java.util.HashMap 인스턴스 만들기
HashMap<String, String> hm = new HashMap<>();

=>generics에 적용하는 자료형은 참조형 만 가능합니다.
value 형은 안됩니다.
int 를 적용하고자 하는 경우에는 Integer 라고 해야 합니다.
=>generics가 적용된 클래스는 자료구조 클래스이기 때문에 중요합니다.


**enum
=>값을 한정 짓기 위해서 final 변수들을 하나의 그룹으로 묶은 것
enum 묶을이름{
	final 변수들의 이름을 나열;
}
사용을 할 때는 묶을이름.final변수이름 형식으로 사용

**annotation
=>@로 시작하는 문자열로 메소드 위에 사용해서 자바코드를 호출하는 것
=>매번 수행해야 하고 일반 로직과 별 상관이 없는 코드의 경우 annotation으로 묶으면 코드가 간결해집니다.

@Override: 오버라이딩 된 메소드라는 것을 명시적으로 알려주고자 할 때 사용
이 어노테이션이 있는데 상위 클래스에 메소드가 존재하지 않으면 에러입니다.

@Deprecated: 현재는 사용가능하지만 대체하는 메소드가 별도로 존재하므로 사용을 권장하지 않는 어노테이션

@SuppressWarning: 메소드 내부에서 경고가 발생하더라도 개의치 않고 수행하고 경고문을 없애달라는 어노테이션

**search(검색)
=>데이터의 모임에서 특정 데이터의 존재여부나 위치를 찾는 것
1.순차 검색
=>데이터가 정렬되지 않았을 때 맨 앞에서 부터 순서대로 데이터를 찾는 방식

2.제어 검색
=>데이터가 정렬되어 있을 때 검색하는 방식
1)binary search(이분 검색): 가운데 데이터와 비교해서 일치하면 찾은 것이고 작으면 왼쪽에서 가서 찾고 크면 오른쪽에서 찾는 방식

2)fibonacci search(피보나치 검색): 피보나치 수열을 이용해서 검색

3)binary tree search(이진 트리 검색): 데이터를 저장할 때 작으면 왼쪽 크면 오른쪽에 배치해서 검색

4)보간 검색: 검색위치를 계산해서 검색


데이터: 10 70 30 50 60 20 40
정렬되지 않았을 때는 데이터를 검색하려면 순차 검색을 사용합니다.
10->1, 70->2, 30->3, 50->4, 60->5, 20->6, 40->7

정렬이 된 경우: 10 20 30 40 50 60 70
이분검색: 가운데를 먼저 가보고 작으면 왼쪽 크면 오른쪽
40->1, 20->2, 60->2, 10,30,50,70->3

**java.util.Arrays 클래스
=>모든 메소드가 static 이어서 instance를 생성할 필요가 없습니다.

static int binarySearch(Object [] ar, Object key)
=>ar 배열에서 key의 위치를 검색해서 리턴하는 메소드
=>못찾으면 음수를 리턴하고 데이터가 정렬된 경우에만 올바른 결과를 리턴

static void sort(Object [] ar)
=>ar의 데이터를 정렬해주는 메소드
=>정렬을 할려면 비교할 수 있어야 합니다.
=>비교를 할려면 Comparable 인터페이스를 implements 해서 compare 메소드를 재정의해야 합니다.
=>Comparable 인터페이스를 implements 하지 않은 경우에는 배열과 Comparator 인터페이스를 implements 한 인스턴스를 같이 대입하면 Comparator 인터페이스의 메소드를 가지고 크기 비교를 해서 정렬을 합니다.
=>클래스에 Comparable을 직접 implements 한 경우에는 한 가지 방법으로만 비교가 가능합니다.
=>실제 구현을 할 때는 이 방법보다는 Comparator 인터페이스를 별도로 implements 한 인스턴스를 만들어서 sort 메소드에 대입하는 경우가 많습니다.
=>anonymous class: 익명 클래스
클래스나 인터페이스로부터 상속받는 클래스의 인스턴스를 1번만 사용하는 경우 클래스를 별도로 만들지 않고 인스턴스를 만드는 방법

**배열의 정렬: java.util.Arrays 클래스의 sort 메소드를 이용
=>정렬(sort): 데이터를 순서대로 나열하는 것
=>정렬 방식:오름차순(Ascending) - 작은 것에서 큰 것 순으로 나열
                 내림차순(Descending) - 큰 것에서 작은 것 순으로 나열
=>정렬 알고리즘: 선택정렬, 버블정렬, 삽입정렬, quick정렬 등
                        삽입정렬까지는 반드시 숙지하고 알고리즘 시험을 봐야 하는 경우에는 quick 정렬 까지 알아두세요
=>정렬을 하려면 크기 비교가 가능해야 합니다.
=>일반 숫자 데이터는 크기 비교가 가능합니다.
=>날짜 데이터도 크기 비교가 가능한데 이유는 날짜는 기준 시간으로 부터의 지나온 시간으로 저장되어 있기 때문입니다.
=>문자열은 각 문자를 코드로 변경해서 크기 비교가 가능합니다.
=>Java에서는 이러한 크기 비교하는 메소드를 Comparable 인터페이스의 compareTo 라는 메소드를 이용해서 정의했습니다.
Comparable 인터페이스를 implements 한 클래스의 인스턴스들은 크기비교가 가능합니다.

=>Comparable 인터페이스를 implements 한 클래스의 인스턴스 배열은 Arrays.sort(배열명)을 이용하면 데이터를 오름차순 정렬해 줍니다.

=>Comparable 인터페이스를 implements 하지 않은 클래스의 인스턴스 배열을 정렬하고자 할 때는 Arrays.sort(배열명, Comparator comparator)를 이용합니다.
Comparator 인터페이스를 implements 클래스의 인스턴스를 대입해주면 인스턴스 안에 있는 compare 메소드를 이용해서 크기 비교를 해서 정렬합니다.

=>인터페이스나 클래스를 상속한 클래스의 인스턴스 만들기
1.클래스를 만들고 인스턴스를 만들기 - 인스턴스를 여러 번 사용할 때
class 클래스이름 extends 상위클래스이름 implements 인터페이스이름{
	필요한 메소드 재정의
}

클래스이름 변수명 = new 클래스이름();

2.클래스를 만들지 않고 인스턴스를 만들기 - 인스턴스를 1번만 사용할 때
인터페이스나 상위 클래스이름 변수명 = new 인스턴스나 상위클래스이름(){
	필요한 메소드 재정의
};

=>제너릭을 사용할 때 매개변수가 Object 인 경우에는 반드시 원래의 자료형으로 형변환해서 사용해야 합니다.
=>Object 클래스는 최상위 클래스여서 모든 인스턴스의 주소를 전부 대입받을 수 있는데 사용을 할 때는 원래의 자료형으로 강제 형 변환해서 사용해야 합니다.




















