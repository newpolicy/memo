abstract(추상)
abstract class
=>class앞에 abstract라는 단어를 추가하몀ㄴ 추항 클래스가 됩니다.
=>추상 클래스는 자신의 인스턴스를 생성할 수 없습니다.
=>이 클래스는 상속을 통해서만 사용할 수 있습니다.

2. abstract method
=> 메소드의 결과형 앞에 abstract를 추가하면 추상 메소드가 됩니다.
=> 추상 메소드는 내용을 가질 수 없습니다.
=> { }가 없습니다.
=> 이 메소드는 추상 클래스와 인터페이스에만 존재해야 합니다.
=> 이 메소드가 있는 클래스를 상속하거나 인터페이스를 구현하면 메소드를 반드시 재정의 해야 합니다.
=> 메뉴가 역할을 합니다 - 이 메소드가 반드시 있다라는 보장을 할 수가 있습니다.

**final(중단)
1.final 변수: 변수 앞에 final을 붙이면 이 변수의 값은 변경이 불가능합니다.
                 변수를 상수화 할 때 사용합니다.
                 JAVA API에서는 옵션을 나타낼 때 주로 이용합니다.
                프로그램을 이해하기 쉽게 만들기 위한 용도로도 많이 사용합니다.

2.final 메소드: 메소드의 결과형 앞에 final을 붙여서 만들고 이 메소드는 오버라이딩이 안됩니다.
                    오버라이딩 하면 안됩니다.

3.final 클래스: class앞에 붙여서 만들고 이 클래스는 상속이 안됩니다.

=> 상속을 하거나 오버라이딩을 하게되면 기존 기능을 변경할 수 있습니다.
=> 시스템과 관련된 기능을 수행하는 클래스나 메소드는 기능을 변경하면 안되므로 상속을 못하게 하거나 재정의를 못하게 합니다.
=> final 변수는 관례 상 이름을 모두 대문자로 만듭니다.

**interface - Protocol(규칙, 규약, 약속)
=> 추상 메소드와 final 변수 만을 가진 java 개체
=> 추상 클래스는 일반 변수나 메소드도 소유할 수 있지만 interface는 추상 메소드 만을 소유합니다
=> 선언과 구현을 분리하기 위해서입니다.
=> 메소드를 선언할 때 abstract를 안 붙여도 abstract가 자동 삽입됩니다.
=> 변수를 만들 때 final을 안붙여도 final이 자동 삽입됩니다.

1생성
interface 인터페이스이름{
             메소드 선언
             변수 선언
}

2.클래스가 인터페이스를 사용
class 클래스 이름 extends 상위 클래스 이름 implements 인터페이스 이름 나열 {
}
=> 인터페이스는 내용이 없기 때문에 상속하는 것이 아니고 구현하는 것입니다.
=> 인터페이스는 하나의 클래스에 여러 개 implements 할 수 있습니다.

3.인터페이스도 내용이 없기 때문에 인스턴스를 생성할 수 없지만 (new를 못함) 변수는 선언이 가능합니다.
=> 클래스 처럼 인터페이스 변수도 자신을  implements한 클래스의 인스턴스 주소를 대입받을 수 있습니다.

4.인터페이스는 여러 개 inplements 할 수 있습니다.

5.인터페이스도 상속할 수 있습니다.
=> 인터페이스를 다른 인터페이스를 상속할 때는 extends를 이용해야 합니다.

**클래스 들 사이의 관계
1. has a: 하나의 클래스 안에서 다른 클래스를 사용하는 것
=> 포함관께

2.is a: 상속 관계

**내부 클래스
=> 클래스 안에 존재하는 클래스
1.종류 
1)inner class: 클래스 안에 존재하는 클래스
2)static inner class: ststic 맴버를 소유한 inner class
3)local inner class:메소드 안에 존재하는 inner class
4)annonymous inner class: 익명 클래스 - 클래스 이름이 없는 클래스의 객체
=> 가장 많이 사용되는 클래스는 익명 클래스입니다.
=> 나머지 3개는 보통 안드로이드에서 사용을 합니다.

2.inner class
=> 클래스 안에 클래스가 있는 형태
=> 다른 클래스들은 사용을 하지 않고 자신만 사용하는 클래스가 있을 때 클래스 안에 클래스를 만드는 것
=> 이 클래스를 만들면 외부클래스$내부클래스 이름으로 별도의 클래스가 만들어집니다.  

3.Anonymous Class
=> 인터페이스나 클래스를 상속받은 후 인스턴스를 생성해서 사용해서 하는 경우 인터페이스나 클래스를 상속받은 클래스를 만들고 그 클래스의 인스턴스를 만들어서
사용해야 합니다.
=>이 때 클래스의 인스턴스를 1개만 만들어서 사용한다면 클래스를 만드는 것은 낭비가 될 수 있습니다.
=>위 처럼 인스턴스를 1개만 만들어서 사용하는 경우에는 필요할 때 클래스를 만들지 않고 바로 인스턴스를 만들어서 사용할 수 있도록 해주는 문법이 Anonymous Class 입니다.
=> java GUI Programming의 이벤트 처리와 안드로이드에서 많이 사용하는 문법입니다
=>Android Studio에서는 이 문법을 사용하면 람다 표현식으로 변환하는 작업까지 자동으로 수행해 줍니다. 

상위클래스이름 변수명 =  new 상위 클래스를 상속받은 클래스를 만들어서 인스턴스를 생성하는 것과 동일한 작업이 수행됩니다.

상위클래스이름 변수명 = new 상위클래스 이름() {       
                                  메소드 재정의
};

*java에서 스레드를 생성해서 실행하는 방법
 Thread 클래스를 상속받은 클래스에 run 메소드를 재정의해서 스레드로 수행할 내용을 작성하고 인스턴스를 만든 후
 start()를 호출하면 됩니다.

**인스턴스 사이의 데이터 공유
1.동일한 클래스로부터 생성된 인스턴스의 경우
=>static 변수를 만들어서 데이터를 공유하면 됩니다.

2.서로 다른 클래스로부터 생성된 인스턴스의 경우
1)포함 관계인 경우
=>생성자를 이용해서 데이터를 넘기기: 속도는 빠르지만 메모리를 많이 사용
=>setter를 이용해서 데이터를 넘기기: 메모리를 적게 사용하지만 속도가 느림

2)아무런 관계가 아닌 경우
=>전역변수를 만들어서 메소드 안에서 전역변수를 수정하면 됩니다.
=>전역변수를 만들어서 사용하는 방법은 싱글톤 패턴을 이요하는 것이 좋기 때문에 디자인 패턴을 배우고 난 후에 실습.